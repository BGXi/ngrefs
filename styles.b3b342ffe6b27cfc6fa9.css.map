{"version":3,"sources":["./src/styles/E:/dev/ngrefs/projects/main/src/styles/theme-main.scss","./src/styles/E:/dev/ngrefs/projects/main/src/styles/theme-night.scss","./src/styles/E:/dev/ngrefs/projects/main/src/styles/main.scss","./src/styles/E:/dev/ngrefs/node_modules/sass-mq/_mq.scss","./src/styles/E:/dev/ngrefs/projects/ui/src/styles/params.scss","E:/dev/ngrefs/node_modules/highlight.js/styles/github.css"],"names":[],"mappings":"AAAA,MACE,gFACA,kEAEA,cACA,oBACA,oBACA,gCACA,+BACA,wBCTF,aACE,iBACA,iBACA,qBCEF,KACE,yBACA,uBACA,6BACA,eACA,eAEA,CAGF,UAJE,SACA,SAKA,CAGF,kBACE,uBACA,6BACA,yBAGF,EACE,uBAGF,6BACE,6BAGF,SACE,kBACA,6BACA,gBAGF,IACE,mBAGF,KACE,kCACA,SACA,kBAGF,SACE,uBACA,UACA,cAGF,IACE,aACA,cAGF,EACE,aAIA,KACE,SAEF,OACE,eAIJ,cACE,eACA,iBACE,iBACA,mBACA,mBACE,SAGJ,iBACE,iBACA,kBACA,mBACA,mBACE,SAGJ,iBACE,iBACA,kBACA,mBACA,mBACE,SAGJ,0BACE,oFAEF,oBACE,yBAEE,0BACE,yBACA,gBACA,sCACE,eCoIF,0BD3HJ,iBACE,iBACA,mBAEF,iBACE,kBACA,mBACA,oBAEF,iBACE,iBACA,kBACA,kBElIC,EDiPC,0BDxGJ,iBACE,iBACA,mBAEF,iBACE,iBACA,mBACA,oBAEF,iBACE,kBACA,kBACA,kBErJC,EF0JP,oCACE,GACE,gBAEF,IACE,gBAEF,GACE,iBARJ,4BACE,GACE,gBAEF,IACE,gBAEF,GACE,iBG5JJ,MACE,aAAc,CACd,eAAgB,CAChB,YAAc,CACd,UAAW,CACX,kBACF,CAEA,0BAEE,UAAW,CACX,iBACF,CAEA,6CAGE,UAAW,CACX,eACF,CAEA,uFAKE,UACF,CAEA,0BAEE,UACF,CAEA,4CAGE,UAAW,CACX,eACF,CAEA,YACE,eACF,CAEA,mCAEE,UAAW,CACX,eACF,CAEA,qCAGE,UAAc,CACd,eACF,CAEA,wBAEE,aACF,CAEA,0BAEE,aACF,CAEA,kCAEE,aACF,CAEA,WACE,UAAW,CACX,eACF,CAEA,eACE,eACF,CAEA,eACE,eACF,CAEA,eACE,iBACF,CAEA,aACE,eACF","file":"styles.b3b342ffe6b27cfc6fa9.css","sourcesContent":[":root {\n  --sansSerif: \"Roboto\", \"Segoe UI\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n  --monospace: \"Consolas\", \"Inconsolata\", \"Monaco\", \"Courier\", monospace;\n\n  --bodyBg: #ffffff;\n  --textColor: #314766;\n  --linkColor: #27304e;\n  --codeColor: rgba(27, 31, 35, 0.05);\n  --interfaceOptionColor: #94ceff;\n  --cliParamColor: #e9d1ff;\n}\n",".theme-night {\n  --bodyBg: #1B1B1B;\n  --textColor: #ffffff;\n  --menuBodyBg: #323232;\n}\n","@import \"theme-main\";\n@import \"theme-night\";\n@import \"params\";\n@import \"mq\";\n\nhtml {\n  background: var(--bodyBg);\n  color: var(--textColor);\n  font-family: var(--sansSerif);\n  font-size: 16px;\n  line-height: 1.5;\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  color: var(--textColor);\n  font-family: var(--sansSerif);\n  overflow-wrap: break-word;\n}\n\na {\n  color: var(--linkColor);\n}\n\nbutton, input, textarea, select {\n  font-family: var(--sansSerif);\n}\n\ncode, pre {\n  border-radius: 3px;\n  font-family: var(--monospace);\n  font-size: 0.85em;\n}\n\npre {\n  background: #f8f8f8;\n}\n\ncode {\n  background-color: var(--codeColor);\n  margin: 0;\n  padding: 0.2em 0.4em;\n}\n\npre code {\n  background: transparent;\n  padding: 0;\n  font-size: 1em;\n}\n\npre {\n  padding: 16px;\n  overflow: auto;\n}\n\np {\n  margin: 1em 0;\n}\n\nul {\n  p {\n    margin: 0;\n  }\n  a p {\n    display: inline;\n  }\n}\n\n.page-content {\n  font-size: 1rem;\n  h1 {\n    font-size: 1.8rem;\n    margin: $grid * 3 0 $grid * 2;\n    p {\n      margin: 0;\n    }\n  }\n  h2 {\n    font-size: 1.5rem;\n    margin: $grid * 3 0 $grid 0;\n    padding-bottom: $grid / 2;\n    p {\n      margin: 0;\n    }\n  }\n  h3 {\n    font-size: 1.1rem;\n    margin: $grid * 2 0 $grid / 2 0;\n    padding-bottom: $grid / 2;\n    p {\n      margin: 0;\n    }\n  }\n  .-highlight {\n    animation: 800ms linear highlight-effect;\n  }\n  table {\n    border-collapse: collapse;\n    tr {\n      td {\n        border: 1px solid #f3f3f3;\n        padding: $grid / 2 $grid;\n        &:first-child {\n          min-width: 75px;\n        }\n      }\n    }\n  }\n}\n\n@include mq($from: tablet) {\n  .page-content {\n    h1 {\n      font-size: 1.9rem;\n      margin: $grid * 4 0 $grid * 2;\n    }\n    h2 {\n      font-size: 1.55rem;\n      margin: $grid * 4 0 $grid * 1.5 0;\n      padding-bottom: $grid * 1.5;\n    }\n    h3 {\n      font-size: 1.2rem;\n      margin: $grid * 3 0 $grid 0;\n      padding-bottom: $grid;\n    }\n  }\n}\n\n@include mq($from: desktop) {\n  .page-content {\n    h1 {\n      font-size: 2.2rem;\n      margin: $grid * 6 0 $grid * 2;\n    }\n    h2 {\n      font-size: 1.6rem;\n      margin: $grid * 6 0 $grid * 1.5 0;\n      padding-bottom: $grid * 1.5;\n    }\n    h3 {\n      font-size: 1.25rem;\n      margin: $grid * 4 0 $grid 0;\n      padding-bottom: $grid;\n    }\n  }\n}\n\n@keyframes highlight-effect {\n  0% {\n    background: #ffffff;\n  }\n  30% {\n    background: yellow;\n  }\n  100% {\n    background: #ffffff;\n  }\n}\n","@charset \"UTF-8\"; // Fixes an issue where Ruby locale is not set properly\n                  // See https://github.com/sass-mq/sass-mq/pull/10\n\n/// Base font size on the `<body>` element\n///\n/// Do not override this value, or things will break\n///\n/// @link https://github.com/sass-mq/sass-mq/issues/122\n/// @deprecated This setting will be removed in sass-mq v6.0.0\n/// @access private\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Responsive mode\n///\n/// Set to `false` to enable support for browsers that do not support @media queries,\n/// (IE <= 8, Firefox <= 3, Opera <= 9)\n///\n/// You could create a stylesheet served exclusively to older browsers,\n/// where @media queries are rasterized\n///\n/// @example scss\n///  // old-ie.scss\n///  $mq-responsive: false;\n///  @import 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint\n///                   // larger breakpoints will be ignored\n///\n/// @type Boolean\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-off Disabled responsive mode documentation\n$mq-responsive: true !default;\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$mq-breakpoints: (\n    mobile:  320px,\n    tablet:  740px,\n    desktop: 980px,\n    wide:    1300px\n) !default;\n\n/// Static breakpoint (for fixed-width layouts)\n///\n/// Define the breakpoint from $mq-breakpoints that should\n/// be used as the target width for the fixed-width layout\n/// (i.e. when $mq-responsive is set to 'false') in a old-ie.scss\n///\n/// @example scss\n///  // tablet-only.scss\n///  //\n///  // Ignore all styles above tablet breakpoint,\n///  // and fix the styles (such as the layout) at tablet width\n///  $mq-responsive: false;\n///  $mq-static-breakpoint: tablet;\n///  @import 'main'; // @media queries in this file will be rasterized up to tablet\n///                   // larger breakpoints will be ignored\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#adding-custom-breakpoints Full documentation and examples\n$mq-static-breakpoint: desktop !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width. For example: (mobile, tablet, desktop).\n///\n/// @example scss\n///   $mq-show-breakpoints: (mobile, tablet, desktop);\n///   @import 'path/to/mq';\n///\n/// @type map\n$mq-show-breakpoints: () !default;\n\n/// Customize the media type (for example: `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples\n$mq-media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @ignore @param {Number} $base-font-size [$mq-base-font-size] - `<body>` font size (deprecated)\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if ($mq-base-font-size != 16px) {\n        @warn \"Overriding $mq-base-font-size will break things, see https://github.com/sass-mq/sass-mq/issues/122.\";\n    }\n    @if ($base-font-size != 16px) {\n        @warn \"The $base-font-size argument will be removed in sass-mq v6.0.0, as overriding it breaks things, see https://github.com/sass-mq/sass-mq/issues/122.\";\n    }\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px * 1px, $base-font-size);\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints\n///\n/// @example scss\n///  $tablet-width: mq-get-breakpoint-width(tablet);\n///  @media (min-width: mq-get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @returns {Number} Value in pixels\n@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {\n    @if map-has-key($breakpoints, $name) {\n        @return map-get($breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from [false] - One of $mq-breakpoints\n/// @param {String | Boolean} $until [false] - One of $mq-breakpoints\n/// @param {String | Boolean} $and [false] - Additional media query parameters\n/// @param {String} $media-type [$mq-media-type] - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints [$mq-breakpoints]\n/// @ignore @param {String} $static-breakpoint [$mq-static-breakpoint]\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $mq-media-type\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-static-breakpoint\n/// @requires {function} mq-px2em\n/// @requires {function} mq-get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n    $from: false,\n    $until: false,\n    $and: false,\n    $media-type: $mq-media-type,\n    $breakpoints: $mq-breakpoints,\n    $responsive: $mq-responsive,\n    $static-breakpoint: $mq-static-breakpoint\n) {\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n            and $media-type != 'print'\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _mq-quick-sort($list) {\n    $less:  ();\n    $equal: ();\n    $large: ();\n\n    @if length($list) > 1 {\n        $seed: nth($list, ceil(length($list) / 2));\n\n        @each $item in $list {\n            @if ($item == $seed) {\n                $equal: append($equal, $item);\n            } @else if ($item < $seed) {\n                $less: append($less, $item);\n            } @else if ($item > $seed) {\n                $large: append($large, $item);\n            }\n        }\n\n        @return join(join(_mq-quick-sort($less), $equal), _mq-quick-sort($large));\n    }\n\n    @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _mq-map-sort-by-value($map) {\n    $map-sorted: ();\n    $map-keys: map-keys($map);\n    $map-values: map-values($map);\n    $map-values-sorted: _mq-quick-sort($map-values);\n\n    // Reorder key/value pairs based on key values\n    @each $value in $map-values-sorted {\n        $index: index($map-values, $value);\n        $key: nth($map-keys, $index);\n        $map-sorted: map-merge($map-sorted, ($key: $value));\n\n        // Unset the value in $map-values to prevent the loop\n        // from finding the same index twice\n        $map-values: set-nth($map-values, $index, 0);\n    }\n\n    @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @example scss\n///  @include mq-add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin mq-add-breakpoint($name, $width) {\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n    $mq-breakpoints: _mq-map-sort-by-value($mq-breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints [$mq-show-breakpoints] - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints [$mq-breakpoints] - Breakpoint names and sizes\n///\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include mq-show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n}\n\n@if length($mq-show-breakpoints) > 0 {\n    @include mq-show-breakpoints;\n}\n","$grid: 8px;\n$width: 1100px;\n$contentWidth: 800px;\n$sideWidth: 240px;\n$header: 75px;\n\n$darkBg: #292c32;\n$white: #ffffff;\n$textColor: #314766;\n$codeColor: rgba(27, 31, 35, 0.05);\n$hintColor: #36cadb;\n$tutorialsColor: #2fd93f;\n$tableBdColor: #dddddd;\n\n$linkColor: #27304e;\n$linkColorLight: #345678;\n\n$smallShadow: 0 2px 6px 0 rgba(35, 39, 42, 0.15);\n$mediumShadow: 0 9px 30px 0 rgba(35, 39, 42, .1);\n\n$sansSerif: \"Roboto\", \"Segoe UI\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n//$serif: 'Lora', serif;\n$monospace: \"Consolas\", \"Inconsolata\", \"Monaco\", \"Courier\", monospace;\n","/*\n\ngithub.com style (c) Vasily Polovnyov <vast@whiteants.net>\n\n*/\n\n.hljs {\n  display: block;\n  overflow-x: auto;\n  padding: 0.5em;\n  color: #333;\n  background: #f8f8f8;\n}\n\n.hljs-comment,\n.hljs-quote {\n  color: #998;\n  font-style: italic;\n}\n\n.hljs-keyword,\n.hljs-selector-tag,\n.hljs-subst {\n  color: #333;\n  font-weight: bold;\n}\n\n.hljs-number,\n.hljs-literal,\n.hljs-variable,\n.hljs-template-variable,\n.hljs-tag .hljs-attr {\n  color: #008080;\n}\n\n.hljs-string,\n.hljs-doctag {\n  color: #d14;\n}\n\n.hljs-title,\n.hljs-section,\n.hljs-selector-id {\n  color: #900;\n  font-weight: bold;\n}\n\n.hljs-subst {\n  font-weight: normal;\n}\n\n.hljs-type,\n.hljs-class .hljs-title {\n  color: #458;\n  font-weight: bold;\n}\n\n.hljs-tag,\n.hljs-name,\n.hljs-attribute {\n  color: #000080;\n  font-weight: normal;\n}\n\n.hljs-regexp,\n.hljs-link {\n  color: #009926;\n}\n\n.hljs-symbol,\n.hljs-bullet {\n  color: #990073;\n}\n\n.hljs-built_in,\n.hljs-builtin-name {\n  color: #0086b3;\n}\n\n.hljs-meta {\n  color: #999;\n  font-weight: bold;\n}\n\n.hljs-deletion {\n  background: #fdd;\n}\n\n.hljs-addition {\n  background: #dfd;\n}\n\n.hljs-emphasis {\n  font-style: italic;\n}\n\n.hljs-strong {\n  font-weight: bold;\n}\n"],"sourceRoot":"webpack:///"}